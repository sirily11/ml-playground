{"version":3,"sources":["components/components/Navbar.tsx","components/components/NavSider.tsx","components/pages/NoDataPage.tsx","components/utils/objectDetectionUtils.tsx","components/pages/object detection/SSDDetectionModelPage.tsx","components/pages/object detection/MobileNetPage.tsx","components/pages/image_generation/StyleTransfer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","React","useState","currentPath","setCurrentPath","location","useLocation","useEffect","paths","pathname","split","length","style","backgroundColor","zIndex","theme","mode","defaultSelectedKeys","selectedKeys","title","link","map","c","i","Item","to","Layout","Header","Content","Footer","Sider","LinearRegressionSider","overflow","height","position","left","ObjectDetectionSidebar","ImageGenerationSidebar","NoDataPage","description","this","props","display","justifyContent","flexDirection","Component","colorNames","aqua","azure","beige","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightcyan","lightgreen","lightgrey","lightpink","lightyellow","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","white","yellow","drawRect","detections","ctx","shift","forEach","detection","index","bbox","x","y","width","text","class","color","count","Object","entries","value","getColorByIndex","strokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","Typography","Title","Paragraph","Text","Link","SSDDetectionModelPage","window","innerWidth","setWidth","isLoading","setIsLoading","show","setShow","setDetections","detectionInt","setDetectionInt","webcamRef","useRef","canvasRef","widthFactor","addEventListener","removeEventListener","clearInterval","onRunExampleClick","useCallback","a","cocossd","net","undefined","setTimeout","intval","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","marginTop","maxHeight","ghost","backIcon","extra","type","onClick","disabled","loading","size","column","label","active","paragraph","span","ref","muted","pagination","columns","dataIndex","key","render","dataSource","d","name","score","toFixed","MobileNetPage","imageSrc","setImageSrc","predictions","setPredictions","model","setModel","imageRef","mobilenet","then","classify","results","console","log","uploadButton","LoadingOutlined","PlusOutlined","displayImage","e","reader","FileReader","onload","target","result","readAsDataURL","file","originFileObj","percent","src","alt","objectFit","padding","listType","className","showUploadList","accept","onChange","header","bordered","renderItem","item","mark","probability","StyleTransferPage","originalImageSrc","setOriginalImageSrc","styleImageSrc","setStyleImageSrc","transformImageSrc","setTransformImageSrc","originalImage","styleImage","uploadStyle","uploadOriginal","startTransform","tf","error","fromPixelsAsync","resizeBilinear","expandDims","cast","original","executeAsync","array","styledImage","tensor","shape","canvas","document","createElement","toPixels","dataURL","toDataURL","alert","gutter","icon","UploadOutlined","align","right","bottom","App","minHeight","path","exact","marginLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.639af827.chunk.js","sourcesContent":["import { MenuOutlined } from \"@ant-design/icons\";\nimport { Menu, PageHeader } from \"antd\";\nimport { Header } from \"antd/lib/layout/layout\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useLocation } from \"react-router\";\nimport { MenuNavs } from \"./interface\";\n\nexport default function Navbar() {\n  const [currentPath, setCurrentPath] = React.useState(\"\");\n  const location = useLocation();\n\n  const navLinks: MenuNavs[] = [\n    {\n      title: \"Linear Regression\",\n      link: \"/linear\",\n    },\n    {\n      title: \"Object Detection\",\n      link: \"/object_detection\",\n    },\n    {\n      title: \"Image Generation\",\n      link: \"/image_generation\",\n    },\n  ];\n\n  React.useEffect(() => {\n    let paths = location.pathname.split(\"/\");\n    if (paths.length > 1) {\n      setCurrentPath(\"/\" + paths[1]);\n    } else {\n      setCurrentPath(\"\");\n    }\n  }, [location]);\n\n  return (\n    <Header style={{ backgroundColor: \"white\", zIndex: 100 }}>\n      <Menu\n        theme=\"light\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={[\"1\"]}\n        selectedKeys={[currentPath]}\n      >\n        {navLinks.map((c, i) => (\n          <Menu.Item key={c.link}>\n            <NavLink to={c.link}>{c.title} </NavLink>\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Header>\n  );\n}\n","import { Menu, Layout } from \"antd\";\nimport React from \"react\";\nimport { UserOutlined, VideoCameraOutlined } from \"@ant-design/icons\";\nimport { MenuNavs } from \"./interface\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\n/**\n *\n * Everything is under linear link\n */\nexport function LinearRegressionSider() {\n  const [currentPath, setCurrentPath] = React.useState(\"\");\n  const location = useLocation();\n\n  React.useEffect(() => {\n    setCurrentPath(location.pathname);\n  }, [location]);\n\n  const navLinks: MenuNavs[] = [\n    {\n      title: \"Simple Linear Regression\",\n      link: \"/linear/simple-regression\",\n    },\n  ];\n\n  return (\n    <Sider\n      theme=\"light\"\n      style={{\n        overflow: \"auto\",\n        height: \"100%\",\n        position: \"fixed\",\n        left: 0,\n      }}\n    >\n      <Menu theme=\"light\" mode=\"vertical-left\" selectedKeys={[currentPath]}>\n        {navLinks.map((c, i) => (\n          <Menu.Item key={c.link}>\n            <NavLink to={c.link}>{c.title} </NavLink>\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  );\n}\n\n/**\n *\n * Everything is under object detection link\n */\nexport function ObjectDetectionSidebar() {\n  const [currentPath, setCurrentPath] = React.useState(\"\");\n  const location = useLocation();\n\n  React.useEffect(() => {\n    setCurrentPath(location.pathname);\n  }, [location]);\n\n  const navLinks: MenuNavs[] = [\n    {\n      title: \"SSD Model\",\n      link: \"/object_detection/ssd\",\n    },\n    {\n      title: \"Mobile Net\",\n      link: \"/object_detection/mobile_net\",\n    },\n  ];\n\n  return (\n    <Sider\n      theme=\"light\"\n      style={{\n        overflow: \"auto\",\n        height: \"100%\",\n        position: \"fixed\",\n        left: 0,\n      }}\n    >\n      <Menu theme=\"light\" mode=\"vertical-left\" selectedKeys={[currentPath]}>\n        {navLinks.map((c, i) => (\n          <Menu.Item key={c.link}>\n            <NavLink to={c.link}>{c.title} </NavLink>\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  );\n}\n\n/**\n *\n * Everything is under image generation link\n */\nexport function ImageGenerationSidebar() {\n  const [currentPath, setCurrentPath] = React.useState(\"\");\n  const location = useLocation();\n\n  React.useEffect(() => {\n    setCurrentPath(location.pathname);\n  }, [location]);\n\n  const navLinks: MenuNavs[] = [\n    {\n      title: \"Style Transfer\",\n      link: \"/image_generation/style\",\n    },\n  ];\n\n  return (\n    <Sider\n      theme=\"light\"\n      style={{\n        overflow: \"auto\",\n        height: \"100%\",\n        position: \"fixed\",\n        left: 0,\n      }}\n    >\n      <Menu theme=\"light\" mode=\"vertical-left\" selectedKeys={[currentPath]}>\n        {navLinks.map((c, i) => (\n          <Menu.Item key={c.link}>\n            <NavLink to={c.link}>{c.title} </NavLink>\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  );\n}\n","import { Empty } from \"antd\";\nimport React, { Component } from \"react\";\n\ninterface Props {\n  description: string;\n}\n\ninterface State {}\n\nexport default class NoDataPage extends Component<Props, State> {\n  render() {\n    const { description } = this.props;\n\n    return (\n      <div\n        style={{\n          height: \"100vh\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Empty description={description} />\n      </div>\n    );\n  }\n}\n","import * as cocossd from \"@tensorflow-models/coco-ssd\";\n\nconst colorNames = {\n  aqua: \"#00ffff\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  black: \"#000000\",\n  blue: \"#0000ff\",\n  brown: \"#a52a2a\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgrey: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkviolet: \"#9400d3\",\n  fuchsia: \"#ff00ff\",\n  gold: \"#ffd700\",\n  green: \"#008000\",\n  indigo: \"#4b0082\",\n  khaki: \"#f0e68c\",\n  lightblue: \"#add8e6\",\n  lightcyan: \"#e0ffff\",\n  lightgreen: \"#90ee90\",\n  lightgrey: \"#d3d3d3\",\n  lightpink: \"#ffb6c1\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  navy: \"#000080\",\n  olive: \"#808000\",\n  orange: \"#ffa500\",\n  pink: \"#ffc0cb\",\n  purple: \"#800080\",\n  violet: \"#800080\",\n  red: \"#ff0000\",\n  silver: \"#c0c0c0\",\n  white: \"#ffffff\",\n  yellow: \"#ffff00\",\n};\n\nconst getColorByIndex = (index: number) => {\n  var count = 0;\n  for (let [key, value] of Object.entries(colorNames)) {\n    if (count == index) {\n      return value;\n    }\n    count += 1;\n  }\n};\n\nexport const drawRect = (\n  detections: cocossd.DetectedObject[],\n  ctx: CanvasRenderingContext2D,\n  shift: number\n) => {\n  detections.forEach((detection, index) => {\n    const [x, y, width, height] = detection.bbox;\n    const text = detection.class;\n\n    const color = getColorByIndex(index) ?? \"green\";\n    ctx.strokeStyle = color;\n    ctx.font = \"18px Arial\";\n    ctx.fillStyle = color;\n\n    ctx.beginPath();\n    ctx.fillText(text, x - shift, y);\n    ctx.rect(x - shift, y, width, height);\n    ctx.stroke();\n  });\n};\n","import {\n  AutoComplete,\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  PageHeader,\n  Row,\n  Skeleton,\n  Typography,\n  Table,\n} from \"antd\";\nimport React from \"react\";\nimport Webcam from \"react-webcam\";\nimport \"@tensorflow/tfjs-backend-cpu\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport { drawRect } from \"../../utils/objectDetectionUtils\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\n\nexport default function SSDDetectionModelPage() {\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [show, setShow] = React.useState(false);\n  const [detections, setDetections] = React.useState<cocossd.DetectedObject[]>(\n    []\n  );\n  const [detectionInt, setDetectionInt] = React.useState<any>();\n  const webcamRef = React.useRef<Webcam>(null);\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const widthFactor = 0.64;\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setWidth(window.innerWidth);\n    });\n\n    return () => {\n      window.removeEventListener(\"resize\", () => {});\n      window.clearInterval(detectionInt);\n    };\n  }, []);\n\n  const onRunExampleClick = React.useCallback(async () => {\n    setIsLoading(true);\n    const net = await cocossd.load();\n    setIsLoading(false);\n    setShow(true);\n    if (detectionInt === undefined) {\n      setTimeout(() => {\n        const intval = setInterval(() => {\n          detect(net);\n        }, 10);\n        setDetectionInt(intval);\n      }, 200);\n    }\n  }, []);\n\n  const detect = async (net: cocossd.ObjectDetection) => {\n    if (webcamRef && canvasRef) {\n      if (\n        typeof webcamRef.current !== \"undefined\" &&\n        webcamRef.current !== null &&\n        webcamRef!.current!.video!.readyState === 4\n      ) {\n        // Get Video Properties\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef!.current!.video!.videoWidth;\n        const videoHeight = webcamRef!.current!.video!.videoHeight;\n\n        // Set video width\n        webcamRef!.current!.video!.width = videoWidth;\n        webcamRef!.current!.video!.height = videoHeight;\n\n        // Set canvas height and width\n        canvasRef!.current!.width = videoWidth;\n        canvasRef!.current!.height = videoHeight;\n\n        const obj = await net.detect(video!);\n        setDetections(obj);\n        // Draw mesh\n        const ctx = canvasRef!.current!.getContext(\"2d\");\n\n        drawRect(obj, ctx!, 0);\n      }\n    }\n  };\n\n  return (\n    <Card style={{ marginTop: 20, maxHeight: \"80vh\" }}>\n      <PageHeader\n        ghost={false}\n        backIcon={false}\n        title=\"Object Detection With SSD Model\"\n        extra={[\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={onRunExampleClick}\n            disabled={isLoading}\n            loading={isLoading}\n          >\n            Run the example\n          </Button>,\n        ]}\n      >\n        <Descriptions size=\"small\" column={3}>\n          <Descriptions.Item label=\"Model Name\">\n            ssdlite_mobilenet_v2\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Publisher\">TensorFlow</Descriptions.Item>\n          <Descriptions.Item label=\"Creation Time\">\n            04/23/2021\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Model Size\">28.56 MB</Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n      <Row>\n        <Skeleton active={true} paragraph={true} loading={isLoading} />\n        <Col span={18}>\n          {show && (\n            <div\n              style={{\n                position: \"relative\",\n                height: (width * widthFactor * 3) / 4,\n                display: \"flex\",\n              }}\n            >\n              <Webcam\n                ref={webcamRef}\n                muted={true}\n                width={width * widthFactor * 0.8}\n                style={{\n                  position: \"absolute\",\n                  zIndex: 8,\n                }}\n              />\n\n              <canvas\n                ref={canvasRef}\n                width={width * widthFactor * 0.8}\n                height={(width * widthFactor * 3) / 4}\n                style={{\n                  position: \"absolute\",\n                  zIndex: 9,\n                  // backgroundColor: \"red\",\n                }}\n              />\n            </div>\n          )}\n        </Col>\n\n        <Col span={6}>\n          {show && (\n            <Table\n              pagination={false}\n              columns={[\n                {\n                  title: \"Class Name\",\n                  dataIndex: \"name\",\n                  key: \"name\",\n                  render: (text: string) => <a>{text}</a>,\n                },\n                {\n                  title: \"Scores\",\n                  dataIndex: \"score\",\n                  key: \"scores\",\n                  render: (text: string) => <a>{text}</a>,\n                },\n              ]}\n              dataSource={detections.map((d) => {\n                return {\n                  name: d.class,\n                  score: d.score.toFixed(3),\n                };\n              })}\n            />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n","import {\n  InboxOutlined,\n  LoadingOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  List,\n  PageHeader,\n  Progress,\n  Row,\n  Typography,\n  Upload,\n} from \"antd\";\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport React from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\nexport default function MobileNetPage() {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [imageSrc, setImageSrc] = React.useState<string>();\n  const [predictions, setPredictions] = React.useState<\n    { className: string; probability: number }[]\n  >([]);\n  const [model, setModel] = React.useState<mobilenet.MobileNet>();\n  const imageRef = React.useRef<HTMLImageElement>(null);\n\n  React.useEffect(() => {\n    mobilenet.load().then((model) => {\n      setModel(model);\n    });\n  }, []);\n\n  React.useEffect(() => {\n    if (model) {\n      if (imageRef) {\n        model.classify(imageRef.current!).then((results) => {\n          console.log(results);\n          setPredictions(results);\n        });\n      }\n    }\n  }, [imageSrc]);\n\n  const uploadButton = (\n    <div>\n      {isLoading ? <LoadingOutlined /> : <PlusOutlined />}\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  const displayImage = React.useCallback(async (e: any) => {\n    let reader = new FileReader();\n    reader.onload = async (e) => {\n      setImageSrc(e.target!.result as string);\n    };\n    reader.readAsDataURL(e.file.originFileObj);\n  }, []);\n\n  return (\n    <Card style={{ marginTop: 20 }}>\n      {model === undefined && <Progress percent={30} />}\n\n      <PageHeader\n        ghost={false}\n        backIcon={false}\n        title=\"Mobile Net image classification\"\n      >\n        <Descriptions size=\"small\" column={3}>\n          <Descriptions.Item label=\"Model Name\">mobile net</Descriptions.Item>\n          <Descriptions.Item label=\"Publisher\">TensorFlow</Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n      <Row>\n        {imageSrc && (\n          <img\n            ref={imageRef}\n            src={imageSrc}\n            alt=\"avatar\"\n            style={{ width: \"100%\", objectFit: \"contain\" }}\n            height=\"300px\"\n          />\n        )}\n      </Row>\n      <Row style={{ padding: 20 }}>\n        <Col span={4}>\n          <Upload\n            disabled={model === undefined}\n            name=\"avatar\"\n            listType=\"picture-card\"\n            className=\"avatar-uploader\"\n            showUploadList={false}\n            accept=\"image/*\"\n            onChange={displayImage}\n          >\n            {uploadButton}\n          </Upload>\n        </Col>\n        <Col span={20}>\n          <List\n            header={<div>Image Predictions</div>}\n            bordered\n            dataSource={predictions}\n            renderItem={(item) => (\n              <List.Item>\n                <Typography.Text mark>{item.className}</Typography.Text>{\" \"}\n                {(item.probability * 100).toFixed(2)} %\n              </List.Item>\n            )}\n          />\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n","import { UploadOutlined } from \"@ant-design/icons\";\nimport {\n  Affix,\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  PageHeader,\n  Row,\n  Upload,\n} from \"antd\";\nimport { UploadChangeParam } from \"antd/lib/upload\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport React from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nexport default function StyleTransferPage() {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [originalImageSrc, setOriginalImageSrc] = React.useState<string>();\n  const [styleImageSrc, setStyleImageSrc] = React.useState<string>();\n  const [transformImageSrc, setTransformImageSrc] = React.useState<string>();\n\n  const originalImage = React.useRef<HTMLImageElement>(null);\n  const styleImage = React.useRef<HTMLImageElement>(null);\n\n  const uploadStyle = React.useCallback((e: UploadChangeParam<UploadFile>) => {\n    let reader = new FileReader();\n    reader.onload = async (e) => {\n      setStyleImageSrc(e.target!.result as string);\n    };\n    reader.readAsDataURL(e.file.originFileObj);\n  }, []);\n\n  const uploadOriginal = React.useCallback(\n    (e: UploadChangeParam<UploadFile>) => {\n      let reader = new FileReader();\n      reader.onload = async (e) => {\n        setOriginalImageSrc(e.target!.result as string);\n      };\n      reader.readAsDataURL(e.file.originFileObj);\n    },\n    []\n  );\n\n  const startTransform = React.useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const model = await tf.loadGraphModel(\n        \"https://notes.sirileepage.com/files/MSBD5016/models/style_model/model.json\"\n      );\n      if (!styleImage.current || !originalImage.current) {\n        console.error(\"Ref not mounted\");\n        return;\n      }\n      const style = (await tf.browser.fromPixelsAsync(styleImage.current!))\n        .resizeBilinear([224, 224])\n        .expandDims()\n        .cast(\"float32\");\n\n      const original = (\n        await tf.browser.fromPixelsAsync(originalImage.current!)\n      )\n        .resizeBilinear([224, 224])\n        .expandDims()\n        .cast(\"float32\");\n\n      const result = (await model.executeAsync([\n        original,\n        style,\n      ])) as tf.Tensor4D;\n      const styledImage = tf.tensor((await result.array())[0]) as tf.Tensor3D;\n\n      const shape = styledImage.shape;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = shape[0];\n      canvas.height = shape[1];\n\n      await tf.browser.toPixels(styledImage, canvas);\n      const dataURL = canvas.toDataURL();\n      setTransformImageSrc(dataURL);\n    } catch (err) {\n      console.error(err);\n      alert(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [styleImage, originalImage]);\n\n  return (\n    <Card style={{ marginTop: 20 }}>\n      <PageHeader ghost={false} backIcon={false} title=\"Style Transfer\">\n        <Descriptions size=\"small\" column={3}>\n          <Descriptions.Item label=\"Model Name\">\n            arbitrary-image-stylization-v1-256\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Publisher\">Google</Descriptions.Item>\n          <Descriptions.Item label=\"Updated at\">05/01/2021</Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n      <Row gutter={10}>\n        <Col>\n          <Upload\n            onChange={uploadOriginal}\n            accept=\"image/*\"\n            showUploadList={false}\n          >\n            <Button icon={<UploadOutlined />}>Upload original image</Button>\n          </Upload>\n        </Col>\n        <Col>\n          <Upload\n            onChange={uploadStyle}\n            accept=\"image/*\"\n            showUploadList={false}\n          >\n            <Button icon={<UploadOutlined />}>Upload style image</Button>\n          </Upload>\n        </Col>\n      </Row>\n      <Row\n        align=\"bottom\"\n        gutter={10}\n        style={{\n          marginTop: 10,\n        }}\n      >\n        {originalImageSrc && (\n          <Col span={8}>\n            <img\n              ref={originalImage!}\n              src={originalImageSrc}\n              style={{ objectFit: \"contain\", maxHeight: 400 }}\n              width=\"100%\"\n            />\n            <p>Original Image</p>\n          </Col>\n        )}\n        {styleImageSrc && (\n          <Col span={8}>\n            <img\n              ref={styleImage!}\n              src={styleImageSrc}\n              style={{ objectFit: \"contain\", maxHeight: 400 }}\n              width=\"100%\"\n            />\n            <p>Style Image</p>\n          </Col>\n        )}\n        {transformImageSrc && (\n          <Col span={8}>\n            <img\n              src={transformImageSrc}\n              style={{ objectFit: \"contain\", maxHeight: 400 }}\n              width=\"100%\"\n            />\n            <p>Generated Image</p>\n          </Col>\n        )}\n      </Row>\n      <Affix style={{ position: \"absolute\", right: 10, bottom: 10 }}>\n        <Button\n          type=\"primary\"\n          onClick={startTransform}\n          loading={isLoading}\n          disabled={\n            styleImageSrc === undefined || originalImageSrc === undefined\n          }\n        >\n          Transfrom the image\n        </Button>\n      </Affix>\n    </Card>\n  );\n}\n","import { Empty, Layout } from \"antd\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport React from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Navbar from \"./components/components/Navbar\";\nimport {\n  ImageGenerationSidebar,\n  LinearRegressionSider,\n  ObjectDetectionSidebar,\n} from \"./components/components/NavSider\";\nimport \"antd/dist/antd.css\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport NoDataPage from \"./components/pages/NoDataPage\";\nimport SSDDetectionModelPage from \"./components/pages/object detection/SSDDetectionModelPage\";\nimport MobileNetPage from \"./components/pages/object detection/MobileNetPage\";\nimport StyleTransferPage from \"./components/pages/image_generation/StyleTransfer\";\n\nfunction App() {\n  return (\n    <Router>\n      <Layout\n        style={{ maxHeight: \"100%\", minHeight: \"100vh\", overflow: \"hidden\" }}\n      >\n        <Navbar />\n        <Layout>\n          <Switch>\n            <Route path=\"/linear\">\n              <LinearRegressionSider />\n            </Route>\n            <Route path=\"/object_detection\">\n              <ObjectDetectionSidebar />\n            </Route>\n            <Route path=\"/image_generation\">\n              <ImageGenerationSidebar />\n            </Route>\n            <Route path=\"/\" exact>\n              <NoDataPage description={\"Pick an example\"} />\n            </Route>\n          </Switch>\n          <Content style={{ marginLeft: 250, height: \"100%\" }}>\n            <Switch>\n              <Route path=\"/image_generation\" exact>\n                <NoDataPage description=\"Pick a example from left\" />\n              </Route>\n              <Route path=\"/image_generation/style\" exact>\n                <StyleTransferPage />\n              </Route>\n              <Route path=\"/object_detection\" exact>\n                <NoDataPage description=\"Pick a example from left\" />\n              </Route>\n              <Route path=\"/object_detection/ssd\" exact>\n                <SSDDetectionModelPage />\n              </Route>\n              <Route path=\"/object_detection/mobile_net\" exact>\n                <MobileNetPage />\n              </Route>\n              <Route path=\"/linear\">\n                <div>linear</div>\n              </Route>\n            </Switch>\n          </Content>\n        </Layout>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}